control-acronym: "[r5] SI-16"
control-information: >-
  Description:

  Implement the following controls to protect the system memory from
  unauthorized code execution: [Assignment: organization-defined controls].


  Supplemental Guidance:

  Some adversaries launch attacks with the intent of executing code in
  non-executable regions of memory or in memory locations that are prohibited.
  Controls employed to protect memory include data execution prevention and
  address space layout randomization. Data execution prevention controls can
  either be hardware-enforced or software-enforced with hardware enforcement
  providing the greater strength of mechanism. Related Control(s): AC-25, SC-3,
  SI-7.


  Potential Assessment Methods and Objectives:

  The below information from the NIST SP 800-53 Revision 5 Security Catalog is
  intended to provide additional optional mechanisms to take into account when
  reviewing this Security Control. Assessments of the individual security
  requirements must still include a response to the specific procedures/guidance
  stated in the correlated Assessment Procedures.


  Examine: [SELECT FROM: System and information integrity policy; system and
  information integrity procedures; procedures addressing memory protection for
  the system; system design documentation; system configuration settings and
  associated documentation; list of security safeguards protecting system memory
  from unauthorized code execution; system audit records; system security plan;
  other relevant documents or records].


  Interview: [SELECT FROM: Organizational personnel responsible for memory
  protection; organizational personnel with information security
  responsibilities; system/network administrators; system developer].


  Test: [SELECT FROM: Automated mechanisms supporting and/or implementing
  safeguards to protect the system memory from unauthorized code execution].


  Statement of Weakness:

  None
control-implementation-status: Planned
security-control-designation: System-Specific
control-implementation-narrative: ...
ap-acronym: SI-16
cci: 002823; 002824
cci-definition: "002823: Defines the controls to be implemented to protect the
  system's memory from unauthorized code execution.; 002824: Implement
  organization-defined controls to protect its memory from unauthorized code
  execution."
implementation-guidance: "-"
assessment-procedures: "Determine if [Assignment: organization-defined controls]
  are implemented to protect the system memory from unauthorized code
  execution."
inherited: Local
remote-inheritance-instance: "-"
compliance-status: Compliant
test-results: UDS benefits from modern OS and container runtime protections. The
  underlying Linux kernel (especially if using a Defense Unicorn hardened
  distro) provides memory protection features (like NX bit to prevent code
  execution on the stack, ASLR for address randomization). Containers add
  another layer of isolation, so one container’s memory is not accessible to
  another. Many UDS components are written in memory-safe languages (or managed
  environments). For instance, Grafana is in Go (with automatic memory
  management), which reduces certain memory corruption risks. While UDS doesn’t
  provide a specific memory firewall, it inherits strong memory protection from
  the environment it runs in. Therefore, the system has effective memory
  protection in place by virtue of platform and language security features.
rev-4-migration-notes: "Automatically generated test result during Revision 5
  control set migration based on the following mapped Rev. 4 assessment
  procedures: SI-16.1, SI-16.2."
mapped-rev4-aps: SI-16.1; SI-16.2
family: SI
