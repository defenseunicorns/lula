import{q as y,w as s}from"./BOIxZDFm.js";const l="";class g{async request(e,r){const a=await fetch(`${l}${e}`,{headers:{"Content-Type":"application/json",...r?.headers},...r});if(!a.ok)throw new Error(`API Error: ${a.status} ${a.statusText}`);return a.json()}async loadAll(){return this.request("/api/data/all")}async getControl(e){return this.request(`/api/controls/${e}`)}async updateControl(e){return this.request(`/api/controls/${e.id}`,{method:"PUT",body:JSON.stringify(e)})}async createMapping(e){return this.request("/api/mappings",{method:"POST",body:JSON.stringify(e)})}async updateMapping(e){return this.request(`/api/mappings/${e.uuid}`,{method:"PUT",body:JSON.stringify(e)})}async deleteMapping(e){return this.request(`/api/mappings/${e}`,{method:"DELETE"})}async search(e){return this.request(`/api/search?q=${encodeURIComponent(e)}`)}async getControlSet(){return this.request("/api/control-set")}async exportExcel(){const e=await fetch(`${l}/api/export/excel`,{method:"POST"});if(!e.ok)throw new Error(`Export Error: ${e.status} ${e.statusText}`);return e.blob()}async importCSV(e){const r=new FormData;r.append("file",e);const a=await fetch(`${l}/api/import/csv`,{method:"POST",body:r});if(!a.ok)throw new Error(`Import Error: ${a.status} ${a.statusText}`)}}const n=new g,p=s([]),c=s([]),h=s(!0),i=s("saved"),d=s(""),u=s(null),f=s(null),S=y(p,t=>{const e=new Set(t.map(r=>r?._metadata?.family||r?.family||r?.["control-acronym"]?.split("-")[0]||""));return Array.from(e).filter(r=>r).sort()});y([p,u,d],([t,e,r])=>{let a=t;if(e&&(a=a.filter(o=>(o?._metadata?.family||o?.family||o?.["control-acronym"]?.split("-")[0]||"")===e)),r){const o=r.toLowerCase();a=a.filter(m=>JSON.stringify(m).toLowerCase().includes(o))}return a});const x=y([p,c],([t,e])=>t.map(r=>({...r,mappings:e.filter(a=>a.control_id===r.id)}))),C={async init(){try{h.set(!0);const t=await n.loadAll();p.set(t.controls),c.set(t.mappings)}catch(t){console.error("Failed to load data:",t),i.set("error")}finally{h.set(!1)}},async updateControl(t){i.set("saving"),p.update(e=>{const r=e.findIndex(a=>a.id===t.id);return r!==-1&&(e[r]=t),e});try{await n.updateControl(t),i.set("saved"),setTimeout(()=>{i.update(e=>e==="saved"?"saved":e)},2e3)}catch(e){console.error("Failed to update control:",e),i.set("error")}},async createMapping(t){try{const e=await n.createMapping(t);return c.update(r=>[...r,e]),e}catch(e){throw console.error("Failed to create mapping:",e),e}},async updateMapping(t){c.update(e=>{const r=e.findIndex(a=>a.uuid===t.uuid);return r!==-1&&(e[r]=t),e});try{await n.updateMapping(t)}catch(e){throw console.error("Failed to update mapping:",e),e}},async deleteMapping(t){c.update(e=>e.filter(r=>r.uuid!==t));try{await n.deleteMapping(t)}catch(e){throw console.error("Failed to delete mapping:",e),e}},async search(t){try{return await n.search(t)}catch(e){return console.error("Search failed:",e),{controls:[],mappings:[]}}},setSearchTerm(t){d.set(t)},setSelectedFamily(t){u.set(t)},setSelectedControl(t){if(t&&"mappings"in t){const{mappings:e,...r}=t;f.set(r)}else f.set(t)},clearFilters(){d.set(""),u.set(null)}};export{C as a,n as b,p as c,x as d,u as e,d as f,S as g,h as l,c as m,f as s};
