import{q as g,w as a}from"./BnKEWqYI.js";const d="";class ${async request(t,e){const s=await fetch(`${d}${t}`,{headers:{"Content-Type":"application/json",...e?.headers},...e});if(!s.ok)throw new Error(`API Error: ${s.status} ${s.statusText}`);return s.json()}async loadAll(){return this.request("/api/data/all")}async getControls(){return this.request("/api/controls")}async getControl(t){return this.request(`/api/controls/${t}`)}async updateControl(t){return this.request(`/api/controls/${t.id}`,{method:"PUT",body:JSON.stringify(t)})}async deleteControl(t){return this.request(`/api/controls/${t}`,{method:"DELETE"})}async getMappings(){return this.request("/api/mappings")}async getMapping(t){return this.request(`/api/mappings/${t}`)}async createMapping(t){return this.request("/api/mappings",{method:"POST",body:JSON.stringify(t)})}async updateMapping(t){return this.request(`/api/mappings/${t.uuid}`,{method:"PUT",body:JSON.stringify(t)})}async deleteMapping(t){return this.request(`/api/mappings/${t}`,{method:"DELETE"})}async search(t){return this.request(`/api/search?q=${encodeURIComponent(t)}`)}async getStats(){return this.request("/api/stats")}async getControlSet(){return this.request("/api/control-set")}async exportExcel(){const t=await fetch(`${d}/api/export/excel`,{method:"POST"});if(!t.ok)throw new Error(`Export Error: ${t.status} ${t.statusText}`);return t.blob()}async importCSV(t){const e=new FormData;e.append("file",t);const s=await fetch(`${d}/api/import/csv`,{method:"POST",body:e});if(!s.ok)throw new Error(`Import Error: ${s.status} ${s.statusText}`)}async getControlHistory(t,e){const s=e?`?limit=${e}`:"";return this.request(`/api/controls/${t}/history${s}`)}async getControlWithHistory(t,e){const s=e?`?limit=${e}`:"";return this.request(`/api/controls/${t}/with-history${s}`)}async getGitStats(){return this.request("/api/git/stats")}async getMappingHistory(t,e=20){return this.request(`/api/mappings/${t}/history?limit=${e}`)}async getControlComplete(t,e){const s=e?`?limit=${e}`:"";return this.request(`/api/controls/${t}/complete${s}`)}async getFileContentAtCommit(t,e,s,n){let i=`/api/git/file/${t}/${e}`;e==="mapping"&&n&&(i+=`/${n}`);const u=new URLSearchParams;return s&&u.append("controlId",s),u.toString()&&(i+=`?${u.toString()}`),this.request(i)}}const o=new $,l=a([]),c=a([]),m=a(!0),p=a("saved"),h=a(""),y=a(null),f=a(null),S=g(l,r=>{const t=new Set(r.map(e=>e.family));return Array.from(t).sort()}),q=g([l,y,h],([r,t,e])=>{let s=r;if(t&&(s=s.filter(n=>n.family===t)),e){const n=e.toLowerCase();s=s.filter(i=>JSON.stringify(i).toLowerCase().includes(n))}return s}),C=g([l,c],([r,t])=>r.map(e=>({...e,mappings:t.filter(s=>s.control_id===e.id)}))),E={async init(){try{m.set(!0);const r=await o.loadAll();l.set(r.controls),c.set(r.mappings)}catch(r){console.error("Failed to load data:",r),p.set("error")}finally{m.set(!1)}},async updateControl(r){p.set("saving"),l.update(t=>{const e=t.findIndex(s=>s.id===r.id);return e!==-1&&(t[e]=r),t});try{await o.updateControl(r),p.set("saved"),setTimeout(()=>{p.update(t=>t==="saved"?"saved":t)},2e3)}catch(t){console.error("Failed to update control:",t),p.set("error")}},async createMapping(r){try{const t=await o.createMapping(r);return c.update(e=>[...e,t]),t}catch(t){throw console.error("Failed to create mapping:",t),t}},async updateMapping(r){c.update(t=>{const e=t.findIndex(s=>s.uuid===r.uuid);return e!==-1&&(t[e]=r),t});try{await o.updateMapping(r)}catch(t){throw console.error("Failed to update mapping:",t),t}},async deleteMapping(r){c.update(t=>t.filter(e=>e.uuid!==r));try{await o.deleteMapping(r)}catch(t){throw console.error("Failed to delete mapping:",t),t}},async search(r){try{return await o.search(r)}catch(t){return console.error("Search failed:",t),{controls:[],mappings:[]}}},setSearchTerm(r){h.set(r)},setSelectedFamily(r){y.set(r)},setSelectedControl(r){if(r&&"mappings"in r){const{mappings:t,...e}=r;f.set(e)}else f.set(r)},clearFilters(){h.set(""),y.set(null)}};export{E as a,h as b,l as c,o as d,C as e,q as f,y as g,S as h,m as l,c as m,f as s};
